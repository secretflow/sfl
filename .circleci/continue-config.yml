# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  base:
    type: boolean
    default: false
  sfl_component:
    type: boolean
    default: false
  sfl_device:
    type: boolean
    default: false
  sfl_distributed:
    type: boolean
    default: false
  sfl_ml_boost:
    type: boolean
    default: false
  sfl_ml_nn_fl:
    type: boolean
    default: false
  sfl_ml_nn_sl:
    type: boolean
    default: false
  sfl_ml_nn:
    type: boolean
    default: false
  sfl_ml:
    type: boolean
    default: false
  sfl_preprocessing:
    type: boolean
    default: false
  sfl_security_agg:
    type: boolean
    default: false
  sfl_security_priv:
    type: boolean
    default: false
  sfl_security_rand:
    type: boolean
    default: false
  sfl_security:
    type: boolean
    default: false
  sfl_tune:
    type: boolean
    default: false
  sfl_utils:
    type: boolean
    default: false
  sfl_any:
    type: boolean
    default: false
  test_component:
    type: boolean
    default: false
  test_device:
    type: boolean
    default: false
  test_ml_boost:
    type: boolean
    default: false
  test_ml_nn_fl:
    type: boolean
    default: false
  test_ml_nn_sl:
    type: boolean
    default: false
  test_ml_nn:
    type: boolean
    default: false
  test_ml:
    type: boolean
    default: false
  test_preprocessing:
    type: boolean
    default: false
  test_security_agg:
    type: boolean
    default: false
  test_security_priv:
    type: boolean
    default: false
  test_security_rand:
    type: boolean
    default: false
  test_security:
    type: boolean
    default: false
  test_tuner:
    type: boolean
    default: false
  test_utils:
    type: boolean
    default: false
  test_any:
    type: boolean
    default: false

executors:
  linux_executor: # declares a reusable executor
    parameters:
      resource_class:
        type: string
    docker:
      - image: secretflow/ubuntu-base-ci:latest
    resource_class: << parameters.resource_class >>
    shell: /bin/bash --login -eo pipefail
  macos_executor:
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.large.gen1

commands:
  kill_countdown:
    steps:
      - run:
          name: Cancel job after set time
          background: true
          command: |
            sleep 2400
            echo "Canceling workflow as too much time has elapsed"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${BUILD_TIMER_TOKEN}"
  macos_pre_setup:
    steps:
      - run:
          name: Install brew dependencies
          command: brew install wget libomp
      - run:
          name: Install miniconda
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.1.2-0-MacOSX-arm64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init zsh bash
  pytest_wrapper:
    parameters:
      target_folder:
        type: string
      concurrent_num:
        type: string
        default: "auto"
      testmon_prefix:
        type: string
      mode:
        type: string
        default: "sim"
    steps:
      - restore_cache:
          name: Restore pytest testmondata
          key: testmondata_<<parameters.testmon_prefix>>_{{ arch }}_{{ .Branch }}_ # prefix match the latest cache
      - restore_cache:
          name: restore uv cache
          keys:
            - v1-uv-cache-{{ checksum "uv.lock" }}
            - v1-uv-cache-
      - run:
          name: "Fix testmon cache permissions"
          command: |
            # 确保当前目录有写权限
            chmod +w .
            # 处理所有可能的testmon数据库文件（包括带前缀的）
            for testmon_file in .testmondata*; do
              if [ -f "$testmon_file" ]; then
                echo "Setting write permission for $testmon_file"
                chmod +w "$testmon_file"
                # 检查数据库完整性并清理损坏的文件
                if ! sqlite3 "$testmon_file" "SELECT 1;" 2>/dev/null; then
                  echo "Removing corrupted testmon database: $testmon_file"
                  rm -f "$testmon_file"
                fi
              fi
            done
            # 处理testmon数据库目录（如果存在）
            for testmon_dir in .testmondata*.d; do
              if [ -d "$testmon_dir" ]; then
                echo "Setting write permission for directory $testmon_dir"
                chmod -R +w "$testmon_dir"
              fi
            done
      - run:
          name: "Run tests"
          command: |
            set +e
            conda init
            conda install -y -c conda-forge uv
            uv venv
            source .venv/bin/activate
            uv pip install -r pyproject.toml --extra dev --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match --prerelease=allow
            # 再次检查并清理所有可能的损坏testmon数据库
            for testmon_file in .testmondata*; do
              if [ -f "$testmon_file" ] && ! sqlite3 "$testmon_file" "SELECT 1;" 2>/dev/null; then
                echo "Removing corrupted testmon database before running tests: $testmon_file"
                rm -f "$testmon_file"
              fi
            done
            pytest --testmon --env <<parameters.mode>> -n <<parameters.concurrent_num>> --junitxml=results.xml -v -x --capture=no --cov=sfl/  --cov-report=xml:coverage.xml  << parameters.target_folder >>
            ret=$?
            set -e
            if [ $ret -eq 0 ] || [ $ret -eq 5 ]; then
              exit 0
            fi
            exit $ret
      - store_test_results:
          path: ./results.xml
      - save_cache:
          key: testmondata_<<parameters.testmon_prefix>>_{{ arch }}_{{ .Branch }}_{{ .Revision }}
          paths:
            - .testmondata
          when: always
  run_component_test:
    parameters:
      target_folder:
        type: string
      testmon_prefix:
        type: string
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_component >>
              - << pipeline.parameters.test_component >>
          steps:
            - pytest_wrapper:
                target_folder: <<parameters.target_folder>>
                testmon_prefix: <<parameters.testmon_prefix>>
  run_device_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_device >>
              - << pipeline.parameters.test_device >>
          steps:
            - pytest_wrapper:
                target_folder: tests/device/
                testmon_prefix: device
  run_distributed_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_distributed >>
              - << pipeline.parameters.test_device >>
          steps:
            - pytest_wrapper:
                target_folder: tests/distributed/
                testmon_prefix: distributed
  run_ml_boost_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_ml_boost >>
              - << pipeline.parameters.test_ml_boost >>
          steps:
            - pytest_wrapper:
                target_folder: tests/ml/boost/
                testmon_prefix: ml_boost
  run_ml_nn_fl_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_ml_nn_fl >>
              - << pipeline.parameters.test_ml_nn_fl >>
          steps:
            - pytest_wrapper:
                target_folder: tests/ml/nn/fl/
                testmon_prefix: ml_nn_fl
  run_ml_nn_sl_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_ml_nn_sl >>
              - << pipeline.parameters.test_ml_nn_sl >>
          steps:
            - pytest_wrapper:
                target_folder: tests/ml/nn/sl/
                testmon_prefix: ml_nn_sl
  run_ml_nn_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_ml_nn >>
              - << pipeline.parameters.test_ml_nn >>
          steps:
            - pytest_wrapper:
                target_folder: --ignore=tests/ml/nn/fl/ --ignore=tests/ml/nn/sl/ tests/ml/nn/
                testmon_prefix: ml_nn
  run_ml_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_ml >>
              - << pipeline.parameters.test_ml >>
          steps:
            - pytest_wrapper:
                target_folder: --ignore=tests/ml/nn/ --ignore=tests/ml/boost/ tests/ml/
                testmon_prefix: ml
  run_preprocessing_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_preprocessing >>
              - << pipeline.parameters.test_preprocessing >>
          steps:
            - pytest_wrapper:
                target_folder: tests/preprocessing/
                testmon_prefix: preprocessing
  run_security_agg_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_security_agg >>
              - << pipeline.parameters.test_security_agg >>
          steps:
            - pytest_wrapper:
                target_folder: tests/security/aggregation/
                testmon_prefix: security_agg
  run_security_priv_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_security_priv >>
              - << pipeline.parameters.test_security_priv >>
          steps:
            - pytest_wrapper:
                target_folder: tests/security/privacy/
                testmon_prefix: security_priv
  run_security_rand_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_security_rand >>
              - << pipeline.parameters.test_security_rand >>
          steps:
            - pytest_wrapper:
                target_folder: tests/security/random/
                testmon_prefix: security_rand
  run_security_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_security >>
              - << pipeline.parameters.test_security >>
          steps:
            - pytest_wrapper:
                target_folder: --ignore=tests/security/aggregation/ --ignore=tests/security/privacy/ --ignore=tests/security/random/ tests/security/
                testmon_prefix: security
  run_tuner_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_tune >>
              - << pipeline.parameters.test_tuner >>
          steps:
            - pytest_wrapper:
                target_folder: tests/tuner/
                testmon_prefix: tuner
  run_utils_test:
    steps:
      - kill_countdown
      - when:
          condition:
            or:
              - << pipeline.parameters.base >>
              - << pipeline.parameters.sfl_utils >>
              - << pipeline.parameters.test_utils >>
          steps:
            - pytest_wrapper:
                target_folder: tests/utils/
                testmon_prefix: utils
  run_prod_basic_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: tests/
          testmon_prefix: prod_basic
          mode: "prod"
          concurrent_num: "2"
  run_sim_others_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: --ignore=tests/component/ --ignore=tests/device/ --ignore=tests/distributed/ --ignore=tests/ml/ --ignore=tests/preprocessing/ --ignore=tests/security/ --ignore=tests/tuner/ --ignore=tests/utils/ tests
          testmon_prefix: sim_others
          mode: "sim"
          concurrent_num: "2"

jobs:
  linux_build:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - restore_cache:
          name: restore uv cache
          keys:
            - v1-uv-cache-{{ checksum "uv.lock" }}
            - v1-uv-cache-
      - run:
          name: Install python deps
          command: |
            conda init
            conda install -y -c conda-forge uv
            uv venv
            source .venv/bin/activate
            uv pip install -r pyproject.toml --extra dev --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match --prerelease=allow
      - save_cache:
          key: v1-uv-cache-{{ checksum "uv.lock" }}
          paths:
            - "~/.cache/uv"
  macos_build:
    executor: macos_executor
    steps:
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: |
            brew install bazelisk cmake ninja libomp wget protobuf@29
            echo 'export PATH="/opt/homebrew/opt/protobuf@29/bin:$PATH"' >> /Users/distiller/.bash_profile
      - run:
          name: "Install Miniconda"
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.1.2-0-MacOSX-arm64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init zsh bash
      - restore_cache:
          name: restore uv cache
          keys:
            - v1-uv-cache-{{ checksum "uv.lock" }}
            - v1-uv-cache-
      - run:
          name: Install python dependencies
          command: |
            conda init
            conda install -y -c conda-forge uv
            uv venv
            source .venv/bin/activate
            uv pip install -r pyproject.toml --extra dev --index-strategy unsafe-best-match --prerelease=allow
      - save_cache:
          key: v1-uv-cache-{{ checksum "uv.lock" }}
          paths:
            - "~/.cache/uv" # uv default cache path
  linux_component_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_component_test:
          target_folder: tests/component/
          testmon_prefix: component
  linux_device_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_device_test
  linux_distributed_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_distributed_test
  linux_ml_boost_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_ml_boost_test
  linux_ml_nn_fl_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_ml_nn_fl_test
  linux_ml_nn_sl_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_ml_nn_sl_test
  linux_ml_nn_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_ml_nn_test
  linux_ml_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_ml_test
  linux_preprocessing_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_preprocessing_test
  linux_security_agg_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_security_agg_test
  linux_security_priv_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_security_priv_test
  linux_security_rand_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_security_rand_test
  linux_security_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_security_test
  linux_tuner_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_tuner_test
  linux_utils_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_utils_test
  linux_prod_basic_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_prod_basic_test
  linux_sim_others_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_sim_others_test
  macos_component_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_component_test:
          target_folder: tests/component/
          testmon_prefix: component
  macos_device_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_device_test
  macos_distributed_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_distributed_test
  macos_ml_boost_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_ml_boost_test
  macos_ml_nn_fl_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_ml_nn_fl_test
  macos_ml_nn_sl_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_ml_nn_sl_test
  macos_ml_nn_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_ml_nn_test
  macos_ml_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_ml_test
  macos_preprocessing_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_preprocessing_test
  macos_security_agg_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_security_agg_test
  macos_security_priv_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_security_priv_test
  macos_security_rand_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_security_rand_test
  macos_security_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_security_test
  macos_tuner_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_tuner_test
  macos_utils_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_utils_test
  macos_prod_basic_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_prod_basic_test
  macos_sim_others_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_sim_others_test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build_and_test:
    jobs:
      - linux_build:
          name: linux_build-<<matrix.resource_class>>
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
      - linux_component_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_device_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_distributed_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_ml_boost_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_ml_nn_fl_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_ml_nn_sl_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_ml_nn_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_ml_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_preprocessing_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_security_agg_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_security_priv_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_security_rand_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_security_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_tuner_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_utils_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_prod_basic_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_sim_others_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      # - macos_build
      # - macos_component_test:
      #     requires:
      #       - macos_build
      # - macos_device_test:
      #     requires:
      #       - macos_build
      # - macos_distributed_test:
      #     requires:
      #       - macos_build
      # - macos_ml_boost_test:
      #     requires:
      #       - macos_build
      # - macos_ml_nn_fl_test:
      #     requires:
      #       - macos_build
      # - macos_ml_nn_sl_test:
      #     requires:
      #       - macos_build
      # - macos_ml_nn_test:
      #     requires:
      #       - macos_build
      # - macos_ml_test:
      #     requires:
      #       - macos_build
      # - macos_preprocessing_test:
      #     requires:
      #       - macos_build
      # - macos_security_agg_test:
      #     requires:
      #       - macos_build
      # - macos_security_priv_test:
      #     requires:
      #       - macos_build
      # - macos_security_rand_test:
      #     requires:
      #       - macos_build
      # - macos_security_test:
      #     requires:
      #       - macos_build
      # - macos_tuner_test:
      #     requires:
      #       - macos_build
      # - macos_utils_test:
      #     requires:
      #       - macos_build
      # - macos_prod_basic_test:
      #     requires:
      #       - macos_build
      # - macos_sim_others_test:
      #     requires:
      #       - macos_build
