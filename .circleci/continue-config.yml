# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
parameters:
  base:
    type: boolean
    default: false
  sfl:
    type: boolean
    default: false
  tests:
    type: boolean
    default: false

executors:
  linux_executor: # declares a reusable executor
    parameters:
      resource_class:
        type: string
    docker:
      - image: secretflow/ubuntu-base-ci:latest
    resource_class: << parameters.resource_class >>
    shell: /bin/bash --login -eo pipefail
  macos_executor:
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.large.gen1

commands:
  kill_countdown:
    steps:
      - run:
          name: Cancel job after set time
          background: true
          command: |
            sleep 2400
            echo "Canceling workflow as too much time has elapsed"
            curl -X POST --header "Content-Type: application/json" "https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel?circle-token=${BUILD_TIMER_TOKEN}"
  macos_pre_setup:
    steps:
      - run:
          name: Install brew dependencies
          command: brew install wget libomp
      - run:
          name: Install miniconda
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.1.2-0-MacOSX-arm64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init zsh bash
  pytest_wrapper:
    parameters:
      target_folder:
        type: string
      concurrent_num:
        type: string
        default: "auto"
      testmon_prefix:
        type: string
      mode:
        type: string
        default: "sim"
    steps:
      - restore_cache:
          name: Restore pytest testmondata
          key: testmondata_<<parameters.testmon_prefix>>_{{ arch }}_{{ .Branch }}_ # prefix match the latest cache
      - restore_cache:
          name: restore uv cache
          keys:
            - v1-uv-cache-{{ checksum "uv.lock" }}
            - v1-uv-cache-
      - run:
          name: "Fix testmon cache permissions"
          command: |
            if [ -f .testmondata ]; then
              chmod +w .testmondata
            fi
      - run:
          name: "Run tests"
          command: |
            set +e
            conda init
            conda install -y -c conda-forge uv
            uv venv
            source .venv/bin/activate
            uv pip install -r pyproject.toml --extra dev --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match --prerelease=allow
            pytest --testmon --env <<parameters.mode>> -n <<parameters.concurrent_num>> --junitxml=results.xml -v -x --capture=no --cov=sfl/  --cov-report=xml:coverage.xml  << parameters.target_folder >>
            ret=$?
            set -e
            if [ $ret -eq 0 ] || [ $ret -eq 5 ]; then
              exit 0
            fi
            exit $ret
      - store_test_results:
          path: ./results.xml
      - save_cache:
          key: testmondata_<<parameters.testmon_prefix>>_{{ arch }}_{{ .Branch }}_{{ .Revision }}
          paths:
            - .testmondata
          when: always
  run_prod_basic_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: tests/
          testmon_prefix: prod_basic
          mode: "prod"
          concurrent_num: "2"
  run_sim_others_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: --ignore=tests/ml/nn tests
          testmon_prefix: sim_others
          mode: "sim"
          concurrent_num: "2"
  run_sim_tune_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: tests/tuner
          testmon_prefix: sim_tune
          mode: "sim"
          concurrent_num: "4"
  run_sim_ml_nn_fl_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: tests/ml/nn/fl/
          testmon_prefix: sim_ml_nn_fl
          mode: "sim"
          concurrent_num: "1"
  run_sim_ml_nn_sl_basic_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: --ignore=tests/ml/nn/sl/extra/ tests/ml/nn/sl/
          testmon_prefix: sim_ml_nn_sl_basic
          mode: "sim"
          concurrent_num: "2"
  run_sim_ml_nn_sl_applications_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: tests/ml/nn/sl/applications/
          testmon_prefix: sim_ml_nn_sl_applications
          mode: "sim"
          concurrent_num: "1"
  run_sim_ml_nn_sl_model_test:
    steps:
      - kill_countdown
      - pytest_wrapper:
          target_folder: tests/ml/nn/sl/sl_model/
          testmon_prefix: sim_ml_nn_sl_model
          mode: "sim"
          concurrent_num: "2"
jobs:
  linux_build:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - restore_cache:
          name: restore uv cache
          keys:
            - v1-uv-cache-{{ checksum "uv.lock" }}
            - v1-uv-cache-
      - run:
          name: Install python deps
          command: |
            conda init
            conda install -y -c conda-forge uv
            uv venv
            source .venv/bin/activate
            uv pip install -r pyproject.toml --extra dev --extra-index-url https://download.pytorch.org/whl/cpu --index-strategy unsafe-best-match --prerelease=allow
      - save_cache:
          key: v1-uv-cache-{{ checksum "uv.lock" }}
          paths:
            - "~/.cache/uv"
  macos_build:
    executor: macos_executor
    steps:
      - checkout
      - run:
          name: "Install homebrew dependencies"
          command: |
            brew install bazelisk cmake ninja libomp wget protobuf@29
            echo 'export PATH="/opt/homebrew/opt/protobuf@29/bin:$PATH"' >> /Users/distiller/.bash_profile
      - run:
          name: "Install Miniconda"
          command: |
            wget https://repo.anaconda.com/miniconda/Miniconda3-py310_24.1.2-0-MacOSX-arm64.sh -O ~/miniconda.sh
            bash ~/miniconda.sh -b -p $HOME/miniconda
            source $HOME/miniconda/bin/activate
            conda init zsh bash
      - restore_cache:
          name: restore uv cache
          keys:
            - v1-uv-cache-{{ checksum "uv.lock" }}
            - v1-uv-cache-
      - run:
          name: Install python dependencies
          command: |
            conda init
            conda install -y -c conda-forge uv
            uv venv
            source .venv/bin/activate
            uv pip install -r pyproject.toml --extra dev --index-strategy unsafe-best-match --prerelease=allow
      - save_cache:
          key: v1-uv-cache-{{ checksum "uv.lock" }}
          paths:
            - "~/.cache/uv" # uv default cache path
  linux_prod_basic_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_prod_basic_test
  linux_sim_others_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_sim_others_test
  linux_sim_tune_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_sim_tune_test
  linux_sim_ml_nn_fl_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_sim_ml_nn_fl_test
  linux_sim_ml_nn_sl_basic_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_sim_ml_nn_sl_basic_test
  linux_sim_ml_nn_sl_applications_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_sim_ml_nn_sl_applications_test
  linux_sim_ml_nn_sl_model_test:
    parameters:
      resource_class:
        type: string
    executor:
      name: linux_executor
      resource_class: << parameters.resource_class >>
    steps:
      - checkout
      - run_sim_ml_nn_sl_model_test
  macos_prod_basic_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_prod_basic_test
  macos_sim_others_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_sim_others_test
  macos_sim_tune_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_sim_tune_test
  macos_sim_ml_nn_fl_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_sim_ml_nn_fl_test
  macos_sim_ml_nn_sl_basic_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_sim_ml_nn_sl_basic_test
  macos_sim_ml_nn_sl_applications_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_sim_ml_nn_sl_applications_test
  macos_sim_ml_nn_sl_model_test:
    executor: macos_executor
    steps:
      - checkout
      - macos_pre_setup
      - run_sim_ml_nn_sl_model_test
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# disable macos & arm build and test for resource saving.
workflows:
  build_and_test:
    jobs:
      - linux_build:
          name: linux_build-<<matrix.resource_class>>
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
      - linux_prod_basic_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_sim_others_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_sim_tune_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_sim_ml_nn_fl_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_sim_ml_nn_sl_basic_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_sim_ml_nn_sl_applications_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      - linux_sim_ml_nn_sl_model_test:
          matrix:
            parameters:
              resource_class: ["2xlarge+"]
          requires:
            - linux_build-<<matrix.resource_class>>
      # - macos_build
      # - macos_prod_basic_test:
      #     requires:
      #       - macos_build
      # - macos_sim_others_test:
      #     requires:
      #       - macos_build
      # - macos_sim_tune_test:
      #     requires:
      #       - macos_build
      # - macos_sim_ml_nn_fl_test:
      #     requires:
      #       - macos_build
      # - macos_sim_ml_nn_sl_basic_test:
      #     requires:
      #       - macos_build
      # - macos_sim_ml_nn_sl_applications_test:
      #     requires:
      #       - macos_build
      # - macos_sim_ml_nn_sl_model_test:
      #     requires:
      #       - macos_build
